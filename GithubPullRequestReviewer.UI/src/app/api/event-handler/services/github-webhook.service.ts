/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiGithubWebhooksPost } from '../fn/github-webhook/api-github-webhooks-post';
import { ApiGithubWebhooksPost$Params } from '../fn/github-webhook/api-github-webhooks-post';
import { apiRepositoriesRepositoryIdGithubWebhooksGet$Json } from '../fn/github-webhook/api-repositories-repository-id-github-webhooks-get-json';
import { ApiRepositoriesRepositoryIdGithubWebhooksGet$Json$Params } from '../fn/github-webhook/api-repositories-repository-id-github-webhooks-get-json';
import { apiRepositoriesRepositoryIdGithubWebhooksGet$Plain } from '../fn/github-webhook/api-repositories-repository-id-github-webhooks-get-plain';
import { ApiRepositoriesRepositoryIdGithubWebhooksGet$Plain$Params } from '../fn/github-webhook/api-repositories-repository-id-github-webhooks-get-plain';
import { RepositoryHook } from '../models/repository-hook';

@Injectable({ providedIn: 'root' })
export class GithubWebhookService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiRepositoriesRepositoryIdGithubWebhooksGet()` */
  static readonly ApiRepositoriesRepositoryIdGithubWebhooksGetPath = '/api/repositories/{repositoryId}/github-webhooks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiRepositoriesRepositoryIdGithubWebhooksGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiRepositoriesRepositoryIdGithubWebhooksGet$Plain$Response(params: ApiRepositoriesRepositoryIdGithubWebhooksGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<RepositoryHook>>> {
    return apiRepositoriesRepositoryIdGithubWebhooksGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiRepositoriesRepositoryIdGithubWebhooksGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiRepositoriesRepositoryIdGithubWebhooksGet$Plain(params: ApiRepositoriesRepositoryIdGithubWebhooksGet$Plain$Params, context?: HttpContext): Observable<Array<RepositoryHook>> {
    return this.apiRepositoriesRepositoryIdGithubWebhooksGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<RepositoryHook>>): Array<RepositoryHook> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiRepositoriesRepositoryIdGithubWebhooksGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiRepositoriesRepositoryIdGithubWebhooksGet$Json$Response(params: ApiRepositoriesRepositoryIdGithubWebhooksGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<RepositoryHook>>> {
    return apiRepositoriesRepositoryIdGithubWebhooksGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiRepositoriesRepositoryIdGithubWebhooksGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiRepositoriesRepositoryIdGithubWebhooksGet$Json(params: ApiRepositoriesRepositoryIdGithubWebhooksGet$Json$Params, context?: HttpContext): Observable<Array<RepositoryHook>> {
    return this.apiRepositoriesRepositoryIdGithubWebhooksGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<RepositoryHook>>): Array<RepositoryHook> => r.body)
    );
  }

  /** Path part for operation `apiGithubWebhooksPost()` */
  static readonly ApiGithubWebhooksPostPath = '/api/github-webhooks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiGithubWebhooksPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGithubWebhooksPost$Response(params: ApiGithubWebhooksPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiGithubWebhooksPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiGithubWebhooksPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiGithubWebhooksPost(params: ApiGithubWebhooksPost$Params, context?: HttpContext): Observable<void> {
    return this.apiGithubWebhooksPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
