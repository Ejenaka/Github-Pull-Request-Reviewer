/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiUsersAuthTokenGet$Json } from '../fn/user/api-users-auth-token-get-json';
import { ApiUsersAuthTokenGet$Json$Params } from '../fn/user/api-users-auth-token-get-json';
import { apiUsersAuthTokenGet$Plain } from '../fn/user/api-users-auth-token-get-plain';
import { ApiUsersAuthTokenGet$Plain$Params } from '../fn/user/api-users-auth-token-get-plain';
import { apiUsersAuthUrlGet$Json } from '../fn/user/api-users-auth-url-get-json';
import { ApiUsersAuthUrlGet$Json$Params } from '../fn/user/api-users-auth-url-get-json';
import { apiUsersAuthUrlGet$Plain } from '../fn/user/api-users-auth-url-get-plain';
import { ApiUsersAuthUrlGet$Plain$Params } from '../fn/user/api-users-auth-url-get-plain';
import { apiUsersCurrentGet$Json } from '../fn/user/api-users-current-get-json';
import { ApiUsersCurrentGet$Json$Params } from '../fn/user/api-users-current-get-json';
import { apiUsersCurrentGet$Plain } from '../fn/user/api-users-current-get-plain';
import { ApiUsersCurrentGet$Plain$Params } from '../fn/user/api-users-current-get-plain';
import { apiUsersCurrentRepositoriesGet$Json } from '../fn/user/api-users-current-repositories-get-json';
import { ApiUsersCurrentRepositoriesGet$Json$Params } from '../fn/user/api-users-current-repositories-get-json';
import { apiUsersCurrentRepositoriesGet$Plain } from '../fn/user/api-users-current-repositories-get-plain';
import { ApiUsersCurrentRepositoriesGet$Plain$Params } from '../fn/user/api-users-current-repositories-get-plain';
import { Repository } from '../models/repository';
import { User } from '../models/user';

@Injectable({ providedIn: 'root' })
export class UserService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiUsersCurrentGet()` */
  static readonly ApiUsersCurrentGetPath = '/api/users/current';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsersCurrentGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersCurrentGet$Plain$Response(params: ApiUsersCurrentGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return apiUsersCurrentGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsersCurrentGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersCurrentGet$Plain(params: ApiUsersCurrentGet$Plain$Params, context?: HttpContext): Observable<User> {
    return this.apiUsersCurrentGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsersCurrentGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersCurrentGet$Json$Response(params: ApiUsersCurrentGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return apiUsersCurrentGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsersCurrentGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersCurrentGet$Json(params: ApiUsersCurrentGet$Json$Params, context?: HttpContext): Observable<User> {
    return this.apiUsersCurrentGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /** Path part for operation `apiUsersCurrentRepositoriesGet()` */
  static readonly ApiUsersCurrentRepositoriesGetPath = '/api/users/current/repositories';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsersCurrentRepositoriesGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersCurrentRepositoriesGet$Plain$Response(params: ApiUsersCurrentRepositoriesGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Repository>>> {
    return apiUsersCurrentRepositoriesGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsersCurrentRepositoriesGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersCurrentRepositoriesGet$Plain(params: ApiUsersCurrentRepositoriesGet$Plain$Params, context?: HttpContext): Observable<Array<Repository>> {
    return this.apiUsersCurrentRepositoriesGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Repository>>): Array<Repository> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsersCurrentRepositoriesGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersCurrentRepositoriesGet$Json$Response(params: ApiUsersCurrentRepositoriesGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Repository>>> {
    return apiUsersCurrentRepositoriesGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsersCurrentRepositoriesGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersCurrentRepositoriesGet$Json(params: ApiUsersCurrentRepositoriesGet$Json$Params, context?: HttpContext): Observable<Array<Repository>> {
    return this.apiUsersCurrentRepositoriesGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Repository>>): Array<Repository> => r.body)
    );
  }

  /** Path part for operation `apiUsersAuthUrlGet()` */
  static readonly ApiUsersAuthUrlGetPath = '/api/users/auth/url';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsersAuthUrlGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersAuthUrlGet$Plain$Response(params: ApiUsersAuthUrlGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return apiUsersAuthUrlGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsersAuthUrlGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersAuthUrlGet$Plain(params: ApiUsersAuthUrlGet$Plain$Params, context?: HttpContext): Observable<string> {
    return this.apiUsersAuthUrlGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsersAuthUrlGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersAuthUrlGet$Json$Response(params: ApiUsersAuthUrlGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return apiUsersAuthUrlGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsersAuthUrlGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersAuthUrlGet$Json(params: ApiUsersAuthUrlGet$Json$Params, context?: HttpContext): Observable<string> {
    return this.apiUsersAuthUrlGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `apiUsersAuthTokenGet()` */
  static readonly ApiUsersAuthTokenGetPath = '/api/users/auth/token';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsersAuthTokenGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersAuthTokenGet$Plain$Response(params: ApiUsersAuthTokenGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return apiUsersAuthTokenGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsersAuthTokenGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersAuthTokenGet$Plain(params: ApiUsersAuthTokenGet$Plain$Params, context?: HttpContext): Observable<string> {
    return this.apiUsersAuthTokenGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsersAuthTokenGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersAuthTokenGet$Json$Response(params: ApiUsersAuthTokenGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return apiUsersAuthTokenGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsersAuthTokenGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersAuthTokenGet$Json(params: ApiUsersAuthTokenGet$Json$Params, context?: HttpContext): Observable<string> {
    return this.apiUsersAuthTokenGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

}
