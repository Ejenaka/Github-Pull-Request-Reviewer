/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiCommentsPost } from '../fn/comment/api-comments-post';
import { ApiCommentsPost$Params } from '../fn/comment/api-comments-post';
import { apiRecommendationsRecommendationIdCommentsGet$Json } from '../fn/comment/api-recommendations-recommendation-id-comments-get-json';
import { ApiRecommendationsRecommendationIdCommentsGet$Json$Params } from '../fn/comment/api-recommendations-recommendation-id-comments-get-json';
import { apiRecommendationsRecommendationIdCommentsGet$Plain } from '../fn/comment/api-recommendations-recommendation-id-comments-get-plain';
import { ApiRecommendationsRecommendationIdCommentsGet$Plain$Params } from '../fn/comment/api-recommendations-recommendation-id-comments-get-plain';
import { apiRepositoriesRepositoryIdPullRequestsPullRequestNumberReviewCommentsGet$Json } from '../fn/comment/api-repositories-repository-id-pull-requests-pull-request-number-review-comments-get-json';
import { ApiRepositoriesRepositoryIdPullRequestsPullRequestNumberReviewCommentsGet$Json$Params } from '../fn/comment/api-repositories-repository-id-pull-requests-pull-request-number-review-comments-get-json';
import { apiRepositoriesRepositoryIdPullRequestsPullRequestNumberReviewCommentsGet$Plain } from '../fn/comment/api-repositories-repository-id-pull-requests-pull-request-number-review-comments-get-plain';
import { ApiRepositoriesRepositoryIdPullRequestsPullRequestNumberReviewCommentsGet$Plain$Params } from '../fn/comment/api-repositories-repository-id-pull-requests-pull-request-number-review-comments-get-plain';
import { Comment } from '../models/comment';

@Injectable({ providedIn: 'root' })
export class CommentService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiRepositoriesRepositoryIdPullRequestsPullRequestNumberReviewCommentsGet()` */
  static readonly ApiRepositoriesRepositoryIdPullRequestsPullRequestNumberReviewCommentsGetPath = '/api/repositories/{repositoryId}/pull-requests/{pullRequestNumber}/review/comments';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiRepositoriesRepositoryIdPullRequestsPullRequestNumberReviewCommentsGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiRepositoriesRepositoryIdPullRequestsPullRequestNumberReviewCommentsGet$Plain$Response(params: ApiRepositoriesRepositoryIdPullRequestsPullRequestNumberReviewCommentsGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Comment>>> {
    return apiRepositoriesRepositoryIdPullRequestsPullRequestNumberReviewCommentsGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiRepositoriesRepositoryIdPullRequestsPullRequestNumberReviewCommentsGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiRepositoriesRepositoryIdPullRequestsPullRequestNumberReviewCommentsGet$Plain(params: ApiRepositoriesRepositoryIdPullRequestsPullRequestNumberReviewCommentsGet$Plain$Params, context?: HttpContext): Observable<Array<Comment>> {
    return this.apiRepositoriesRepositoryIdPullRequestsPullRequestNumberReviewCommentsGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Comment>>): Array<Comment> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiRepositoriesRepositoryIdPullRequestsPullRequestNumberReviewCommentsGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiRepositoriesRepositoryIdPullRequestsPullRequestNumberReviewCommentsGet$Json$Response(params: ApiRepositoriesRepositoryIdPullRequestsPullRequestNumberReviewCommentsGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Comment>>> {
    return apiRepositoriesRepositoryIdPullRequestsPullRequestNumberReviewCommentsGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiRepositoriesRepositoryIdPullRequestsPullRequestNumberReviewCommentsGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiRepositoriesRepositoryIdPullRequestsPullRequestNumberReviewCommentsGet$Json(params: ApiRepositoriesRepositoryIdPullRequestsPullRequestNumberReviewCommentsGet$Json$Params, context?: HttpContext): Observable<Array<Comment>> {
    return this.apiRepositoriesRepositoryIdPullRequestsPullRequestNumberReviewCommentsGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Comment>>): Array<Comment> => r.body)
    );
  }

  /** Path part for operation `apiRecommendationsRecommendationIdCommentsGet()` */
  static readonly ApiRecommendationsRecommendationIdCommentsGetPath = '/api/recommendations/{recommendationId}/comments';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiRecommendationsRecommendationIdCommentsGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiRecommendationsRecommendationIdCommentsGet$Plain$Response(params: ApiRecommendationsRecommendationIdCommentsGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Comment>>> {
    return apiRecommendationsRecommendationIdCommentsGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiRecommendationsRecommendationIdCommentsGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiRecommendationsRecommendationIdCommentsGet$Plain(params: ApiRecommendationsRecommendationIdCommentsGet$Plain$Params, context?: HttpContext): Observable<Array<Comment>> {
    return this.apiRecommendationsRecommendationIdCommentsGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Comment>>): Array<Comment> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiRecommendationsRecommendationIdCommentsGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiRecommendationsRecommendationIdCommentsGet$Json$Response(params: ApiRecommendationsRecommendationIdCommentsGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Comment>>> {
    return apiRecommendationsRecommendationIdCommentsGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiRecommendationsRecommendationIdCommentsGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiRecommendationsRecommendationIdCommentsGet$Json(params: ApiRecommendationsRecommendationIdCommentsGet$Json$Params, context?: HttpContext): Observable<Array<Comment>> {
    return this.apiRecommendationsRecommendationIdCommentsGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Comment>>): Array<Comment> => r.body)
    );
  }

  /** Path part for operation `apiCommentsPost()` */
  static readonly ApiCommentsPostPath = '/api/comments';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCommentsPost()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCommentsPost$Response(params: ApiCommentsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiCommentsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCommentsPost$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiCommentsPost(params: ApiCommentsPost$Params, context?: HttpContext): Observable<void> {
    return this.apiCommentsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
